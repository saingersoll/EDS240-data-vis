---
title: "Week 3, Lecture 3.2 Wrangling Practice"
author: "Sofia Ingersoll"
date: "2024-01-22"
---

## Setup

```{r message = FALSE}
# load libraries
library(tidyverse)
library(chron)
library(naniar)
library(geofacet)
library(see)
library(gghighlight)
library(ggbeeswarm)
library(ggridges)
library(tidycensus)
library(here)


source(here::here("wk3", 'KEYS.R'))
census_api_key(censusKEY, install = TRUE)

lyme <- read_csv(here('wk3', 'data', 'LD-Case-Counts-by-County-01-20.csv'))
```

# Reading & Data Wrangling

Request API Key and add to git ignore file so it isn't publicly accessible. Then, you'll be able to access this data.
```{r}

# wrangle lyme data

lyme_clean <- lyme %>% 
  janitor::clean_names() %>% 
  rename(county = ctyname, 
         state = stname,
         status = ststatus) %>% 
  pivot_longer(cols = 6:25,
               names_to = 'city_year',
               values_to = 'reported_cases') %>% 
  mutate(year = str_remove(city_year,
                           pattern = 'cases'),
         year = as.factor(year)) %>% 
  select(-city_year)




# case no. by state
lyme_by_state <- lyme_clean %>% 
  group_by(year,
           state) %>% 
  summarize(total_cases = sum(reported_cases))




# us population estimates for 2019
us_state_pop <- get_estimates(geography = 'state',
                              product = 'population',
                              year = 2019) %>% 
  filter(variable == 'POP') %>% 
  select(state = NAME,
         population = value)                            


# this is a good point to export as csv bc API doesn't always work perfectly.




# joining data & calculate incidents for each state during each year
lyme_pop <- left_join(lyme_by_state, us_state_pop) %>% 
  mutate(pop100k = population/100000) %>%               # estimation of population for every 100k ppl
  mutate(cases_per100k = total_cases/pop100k)
```


## Line Plot

```{r}
#---- Create a line plot and highlight based on a conditional ----
lyme_pop %>% 
  filter(year %in% c(2010:2020)) %>% 
  ggplot(aes(x = year,
             y = cases_per100k,
             group = state,
             color = state
  )) +
  geom_line() +
  gghighlight::gghighlight(max(cases_per100k) > 100) =
  scale_y_continuous((
    limits = c(0, NA)                     # force codes data to not be by position rather than length
    # if the range of data is really small, then do not zoom in
    # use this to represent meaningful changes
    # if the value's relationship to zero is insignificant,                                                 there is no need to force a zoom in
  ))
```


## Aspect Ratios & Affect on Slope Perception

Larger aspect ratios creates a steeper appearing slope. Aesthetic can serve as a messenger, especially aspect ratio. No exact rule on what ratios to use, but manipulating this can be very misleading to the audience so be very cautious.

```{r}
lyme_pop %>% 
  filter(year %in% c(2010:2020)) %>% 
  filter(state == "Vermont") %>% 
  ggplot(aes(
    x = year,
    y = cases_per100k,
    group = state
  )) +
  geom_line() +
  #  scale_y_continuous(breaks = seq(0:190,
  #                                 by = 1)) +.  # tool to configure aspect ratio, play around with                                                      ratio in coord_fixed function below
  coord_fixed(ratio = 1/50)                     # y (height) over x (width)

```


## Area Plots

This is essentially a line graph with the area under the curve collored in. The only information provided is from geom_line. 

Minimize ink where you can that is not helpful for interpretting data. This data viz is usually not optimal for shring a message.

Stacked area plots are especially not helpful because the relative contribution of each group need to be calculated via subtration of yf - yi. 

Plot most important group on x axis. Also proportional stacking is best


```{r}
# Area chart one group
lyme_pop %>% 
  filter(year %in% c(2010:2020)) %>% 
  filter(state == "Alabama") %>% 
  ggplot(
    aes(
      x = year,
      y = cases_per100k,
      group = state,
      fill = state                         # fill by color of state
    )) +
  geom_area() +
  scale_fill_manual(values = c('plum')) +  # specify the colors to use for fill 
  scale_x_discrete(expand = 
                     c(0,0)) +             # expand the axes to include 0 on the x  axis  
  scale_y_continuous(expand =
                       c(0,0)) +           # expand y axis to match x axis
  theme(legend.position = "none")


#-Stacked Area Chart----
lyme_pop %>% 
  filter(year %in% c(2010:2020)) %>% 
  filter(state %in% c('Maine','Rhode Island','New Hampshire', 'Vermont')) %>% 
  ggplot(
    aes(
      x = year,
      y = cases_per100k,
      group = state,
      fill = state
    )
  ) +
  geom_area(position = position_fill(reverse = TRUE))  +            # proportional area stacking. Puts on a 100% scale for                                                  group contribution
  scale_y_continuous(labels = 
                       scales::label_percent(scale = 100))

#--Line chart version----

#-Stacked Area Chart----
lyme_pop %>% 
  filter(year %in% c(2010:2020)) %>% 
  filter(state %in% c('Maine','Rhode Island','New Hampshire', 'Vermont')) %>% 
  ggplot(
    aes(
      x = year,
      y = cases_per100k,
      group = state,
      fill = state
    )
  ) +
  geom_line()  +
  facet_wrap(~state)
```




