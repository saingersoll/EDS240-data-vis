---
title: "Lecture 1.3 Notebook"
date: 2024-01-08
author: Sofia Ingersoll 
---
## Packages
```{r message = FALSE}
library(tidyverse)
library(palmerpenguins)
```

## Tidy Data

### Dirty Data

Let's make some untidy data to wrangle with.

Remember, a plot typically requires an x and y axis. In this case, what is our x and y? Do we have more than 2 varibles?

#### What makes this data untidy?
- Each row has more than one observation. We need each observation to make up an entire row.

#### What are we recording? 
- Temperature values need to have its own column.
- An Station ID column should also be included as a column because this is also a variable.
```{r}
# untidy data ----
temp_data_wide <- tribble(
  ~date, ~station1, ~station2,  ~station3,
  "2023-10-01", 30.1, 29.8,  31.2,
  "2023-11-01", 28.6, 29.1,  33.4,
  "2023-12-01", 29.9, 28.5,  32.3
)
```

### Making it Tidy!

We are going to use `pivot_longer` from the tidyr package to clean our data. 
```{r}
# any column name including station, pivot
# and put them in a new column using names_to our new station_id column
# finally, move the values from the old station columns into a new column by the name of temp_c
temp_data_long <- temp_data_wide %>% 
  pivot_longer(cols = starts_with('station'),
               names_to = 'station_id',
               values_to = 'temp_c')
```

## Plot 1

Today, we're going to be working with the `palmerpenguins` package data, `penguins`.

```{r}
# This is giving us the structure of our data set
str(penguins)
```

#### Mapping color Globally
To have the species organized by color, this command must be within aes(). This can be done in either aes sections.
```{r}
ggplot(data = na.omit(penguins),
       mapping = aes(x = bill_length_mm,
                     y = bill_depth_mm)) +
  geom_point(aes(col = species),
             alpha = .5) +
  geom_smooth(method = 'lm') +
  scale_color_manual(values = c('hotpink','plum','magenta'))
```
#### Mapping color locally 
Take note of how the mapping is listed first for this function. 

This should provide individual linear regression lines
```{r}
ggplot() +
  geom_point(aes(x = bill_length_mm,
                 y = bill_depth_mm,
                 col = species),
             data = na.omit(penguins),
             alpha = .5) +
  geom_smooth(method = 'lm')
```


```{r}
ggplot(na.omit(penguins), aes(x = body_mass_g,
                     y = flipper_length_mm,
                     color = body_mass_g)) +
  geom_point() +
  scale_color_gradient(low = "pink", high = 'purple')
```
## Plot 2
Overriding geom_bar's stat:
```{r}
penguins_summary <- penguins %>% 
  count(species)
```

```{r}
colors =  c('cyan', 'limegreen', 'magenta')

ggplot(penguins_summary, aes(x = species,
                              y = n,
                              col = species)) +
  geom_bar(stat = 'identity',
           fill = colors) +
  scale_color_manual(values = c('cyan', 'limegreen', 'magenta')) 
```

Override default stat mapping:

When using proportion, we need to divide that by the total number of observations in data group in the whole data set.
```{r}
ggplot(penguins, aes(x = species, 
                     y = after_stat(prop),
                     group = 1)) +
  geom_bar(fill = colors)
```
#### Position Adjustments
The default in this case is stacking, but using the position argument in geom_bar we can unstack.

- Fill displays the bars at an equal proportion, to better visualization

- Dodge shows the relating bars for each island. A little messier.

- Position = position_argumenthere like:
position = position_dodge_2(preserve = 'single')
```{r}
filling = c('hotpink','plum','magenta')

ggplot(penguins, aes(x = species, fill = island)) +
  geom_bar(position = 'fill')
```
```{r}
ggplot(penguins, aes(x = species, fill = island)) +
  geom_bar(position = position_dodge_2(preserve = 'single'))
```

#### Coordinate Systems

This by default produces the same output that we've previously created
```{r}
ggplot(penguins, aes(x = species)) +
  geom_bar(fill = filling) +
  coord_cartesian()
```
Now, let's flip it!
```{r}
ggplot(penguins, aes(x = species)) +
  geom_bar(fill = filling) +
  coord_flip()
```
Polar Coordinates
```{r}
ggplot(penguins, aes(x = species)) +
  geom_bar(fill = filling) + 
  coord_polar() + 
  theme_classic() +
  theme( # this is where most customization happens
    axis.title = element_text(size = 17,
                              color = 'purple')
  )
```

